
BlinkTWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e6c  08003e6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003e88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003e88  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b59  00000000  00000000  0002d5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001558d  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d687  00000000  00000000  00045e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089403  00000000  00000000  00053514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003348  00000000  00000000  000dc968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e3c 	.word	0x08003e3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e3c 	.word	0x08003e3c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fd2f 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f90d 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa55 	bl	8000994 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ea:	f000 f969 	bl	80007c0 <MX_TIM1_Init>
  MX_TIM11_Init();
 80004ee:	f000 fa03 	bl	80008f8 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 fa25 	bl	8000940 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80004f6:	f000 f9b3 	bl	8000860 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim11);
 80004fa:	487c      	ldr	r0, [pc, #496]	; (80006ec <main+0x214>)
 80004fc:	f001 fd94 	bl	8002028 <HAL_TIM_Base_Start>
uint16_t Tim ;
Tim = __HAL_TIM_GET_COUNTER(&htim11);
 8000500:	4b7a      	ldr	r3, [pc, #488]	; (80006ec <main+0x214>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000506:	813b      	strh	r3, [r7, #8]
uint16_t Tim2;
uint8_t TimStr='-';
 8000508:	232d      	movs	r3, #45	; 0x2d
 800050a:	71fb      	strb	r3, [r7, #7]
uint8_t Str = 'T';
 800050c:	2354      	movs	r3, #84	; 0x54
 800050e:	71bb      	strb	r3, [r7, #6]
for (int i = 0 ; i <=10; i++){HAL_UART_Transmit(&huart1, &TimStr, sizeof(TimStr), 50);}
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e008      	b.n	8000528 <main+0x50>
 8000516:	1df9      	adds	r1, r7, #7
 8000518:	2332      	movs	r3, #50	; 0x32
 800051a:	2201      	movs	r2, #1
 800051c:	4874      	ldr	r0, [pc, #464]	; (80006f0 <main+0x218>)
 800051e:	f002 fbf8 	bl	8002d12 <HAL_UART_Transmit>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b0a      	cmp	r3, #10
 800052c:	ddf3      	ble.n	8000516 <main+0x3e>
uint8_t u8_Speed = 50;
 800052e:	2332      	movs	r3, #50	; 0x32
 8000530:	72fb      	strb	r3, [r7, #11]
HAL_UART_Transmit(&huart1, &Str, sizeof(TimStr), 50);
 8000532:	1db9      	adds	r1, r7, #6
 8000534:	2332      	movs	r3, #50	; 0x32
 8000536:	2201      	movs	r2, #1
 8000538:	486d      	ldr	r0, [pc, #436]	; (80006f0 <main+0x218>)
 800053a:	f002 fbea 	bl	8002d12 <HAL_UART_Transmit>
TIM10->CCR1 =u8_Speed;
 800053e:	4a6d      	ldr	r2, [pc, #436]	; (80006f4 <main+0x21c>)
 8000540:	7afb      	ldrb	r3, [r7, #11]
 8000542:	6353      	str	r3, [r2, #52]	; 0x34
HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);;
 8000544:	2100      	movs	r1, #0
 8000546:	486c      	ldr	r0, [pc, #432]	; (80006f8 <main+0x220>)
 8000548:	f001 fe22 	bl	8002190 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 {if (u8_Speed >=100)u8_Speed =100;if(u8_Speed <=10)u8_Speed =10;
 800054c:	7afb      	ldrb	r3, [r7, #11]
 800054e:	2b63      	cmp	r3, #99	; 0x63
 8000550:	d901      	bls.n	8000556 <main+0x7e>
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	72fb      	strb	r3, [r7, #11]
 8000556:	7afb      	ldrb	r3, [r7, #11]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d801      	bhi.n	8000560 <main+0x88>
 800055c:	230a      	movs	r3, #10
 800055e:	72fb      	strb	r3, [r7, #11]



	  Str ='T';
 8000560:	2354      	movs	r3, #84	; 0x54
 8000562:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Receive(&huart1, &Str, sizeof(Str), 50);
 8000564:	1db9      	adds	r1, r7, #6
 8000566:	2332      	movs	r3, #50	; 0x32
 8000568:	2201      	movs	r2, #1
 800056a:	4861      	ldr	r0, [pc, #388]	; (80006f0 <main+0x218>)
 800056c:	f002 fc63 	bl	8002e36 <HAL_UART_Receive>

	if (Str != 'T'){
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b54      	cmp	r3, #84	; 0x54
 8000574:	f000 80a2 	beq.w	80006bc <main+0x1e4>

		  if(Str == 'F'){
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b46      	cmp	r3, #70	; 0x46
 800057c:	d11b      	bne.n	80005b6 <main+0xde>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	485e      	ldr	r0, [pc, #376]	; (80006fc <main+0x224>)
 8000584:	f001 f876 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	485b      	ldr	r0, [pc, #364]	; (80006fc <main+0x224>)
 800058e:	f001 f871 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	4859      	ldr	r0, [pc, #356]	; (80006fc <main+0x224>)
 8000598:	f001 f86c 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	4856      	ldr	r0, [pc, #344]	; (80006fc <main+0x224>)
 80005a4:	f001 f866 	bl	8001674 <HAL_GPIO_WritePin>
			  u8_Speed+=10;
 80005a8:	7afb      	ldrb	r3, [r7, #11]
 80005aa:	330a      	adds	r3, #10
 80005ac:	72fb      	strb	r3, [r7, #11]
			 			  TIM10->CCR1 =u8_Speed;
 80005ae:	4a51      	ldr	r2, [pc, #324]	; (80006f4 <main+0x21c>)
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	6353      	str	r3, [r2, #52]	; 0x34
 80005b4:	e07b      	b.n	80006ae <main+0x1d6>
		  }
		  else if(Str == 'B'){
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b42      	cmp	r3, #66	; 0x42
 80005ba:	d11b      	bne.n	80005f4 <main+0x11c>
		 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	484e      	ldr	r0, [pc, #312]	; (80006fc <main+0x224>)
 80005c2:	f001 f857 	bl	8001674 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	484c      	ldr	r0, [pc, #304]	; (80006fc <main+0x224>)
 80005cc:	f001 f852 	bl	8001674 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4849      	ldr	r0, [pc, #292]	; (80006fc <main+0x224>)
 80005d6:	f001 f84d 	bl	8001674 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4846      	ldr	r0, [pc, #280]	; (80006fc <main+0x224>)
 80005e2:	f001 f847 	bl	8001674 <HAL_GPIO_WritePin>
		 			 u8_Speed -= 10;
 80005e6:	7afb      	ldrb	r3, [r7, #11]
 80005e8:	3b0a      	subs	r3, #10
 80005ea:	72fb      	strb	r3, [r7, #11]
		 					 			  TIM10->CCR1 =u8_Speed;
 80005ec:	4a41      	ldr	r2, [pc, #260]	; (80006f4 <main+0x21c>)
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	6353      	str	r3, [r2, #52]	; 0x34
 80005f2:	e05c      	b.n	80006ae <main+0x1d6>

		 		  }
		  else if(Str == 'L'){
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	2b4c      	cmp	r3, #76	; 0x4c
 80005f8:	d115      	bne.n	8000626 <main+0x14e>
			  	  	  	  	  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	483f      	ldr	r0, [pc, #252]	; (80006fc <main+0x224>)
 8000600:	f001 f838 	bl	8001674 <HAL_GPIO_WritePin>
						 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	483c      	ldr	r0, [pc, #240]	; (80006fc <main+0x224>)
 800060a:	f001 f833 	bl	8001674 <HAL_GPIO_WritePin>
						 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	483a      	ldr	r0, [pc, #232]	; (80006fc <main+0x224>)
 8000614:	f001 f82e 	bl	8001674 <HAL_GPIO_WritePin>
						 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4837      	ldr	r0, [pc, #220]	; (80006fc <main+0x224>)
 8000620:	f001 f828 	bl	8001674 <HAL_GPIO_WritePin>
 8000624:	e043      	b.n	80006ae <main+0x1d6>
		 		  }
		  else if(Str == 'R'){
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	2b52      	cmp	r3, #82	; 0x52
 800062a:	d115      	bne.n	8000658 <main+0x180>
					  	  	  	  	  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2120      	movs	r1, #32
 8000630:	4832      	ldr	r0, [pc, #200]	; (80006fc <main+0x224>)
 8000632:	f001 f81f 	bl	8001674 <HAL_GPIO_WritePin>
								 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	4830      	ldr	r0, [pc, #192]	; (80006fc <main+0x224>)
 800063c:	f001 f81a 	bl	8001674 <HAL_GPIO_WritePin>
								 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	482d      	ldr	r0, [pc, #180]	; (80006fc <main+0x224>)
 8000646:	f001 f815 	bl	8001674 <HAL_GPIO_WritePin>
								 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	482a      	ldr	r0, [pc, #168]	; (80006fc <main+0x224>)
 8000652:	f001 f80f 	bl	8001674 <HAL_GPIO_WritePin>
 8000656:	e02a      	b.n	80006ae <main+0x1d6>
				 		  }
		  else if(Str == 'W'){
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b57      	cmp	r3, #87	; 0x57
 800065c:	d106      	bne.n	800066c <main+0x194>
			  u8_Speed+=10;
 800065e:	7afb      	ldrb	r3, [r7, #11]
 8000660:	330a      	adds	r3, #10
 8000662:	72fb      	strb	r3, [r7, #11]
			  TIM10->CCR1 =u8_Speed;
 8000664:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <main+0x21c>)
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	6353      	str	r3, [r2, #52]	; 0x34
 800066a:	e020      	b.n	80006ae <main+0x1d6>


		 				 		  }
		  else if(Str == 'w'){
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b77      	cmp	r3, #119	; 0x77
 8000670:	d106      	bne.n	8000680 <main+0x1a8>
		 			  u8_Speed -= 10;
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	3b0a      	subs	r3, #10
 8000676:	72fb      	strb	r3, [r7, #11]
		 			  TIM10->CCR1 =u8_Speed;
 8000678:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <main+0x21c>)
 800067a:	7afb      	ldrb	r3, [r7, #11]
 800067c:	6353      	str	r3, [r2, #52]	; 0x34
 800067e:	e016      	b.n	80006ae <main+0x1d6>


		 		 				 		  }
		  else{ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	481d      	ldr	r0, [pc, #116]	; (80006fc <main+0x224>)
 8000686:	f000 fff5 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	481b      	ldr	r0, [pc, #108]	; (80006fc <main+0x224>)
 8000690:	f000 fff0 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4818      	ldr	r0, [pc, #96]	; (80006fc <main+0x224>)
 800069a:	f000 ffeb 	bl	8001674 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0x224>)
 80006a6:	f000 ffe5 	bl	8001674 <HAL_GPIO_WritePin>
			  Str ='T';
 80006aa:	2354      	movs	r3, #84	; 0x54
 80006ac:	71bb      	strb	r3, [r7, #6]
		  }

		  HAL_UART_Transmit(&huart1, &Str, sizeof(Str), 50);
 80006ae:	1db9      	adds	r1, r7, #6
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	2201      	movs	r2, #1
 80006b4:	480e      	ldr	r0, [pc, #56]	; (80006f0 <main+0x218>)
 80006b6:	f002 fb2c 	bl	8002d12 <HAL_UART_Transmit>
 80006ba:	e747      	b.n	800054c <main+0x74>



	  }
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <main+0x224>)
 80006c2:	f000 ffd7 	bl	8001674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <main+0x224>)
 80006cc:	f000 ffd2 	bl	8001674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <main+0x224>)
 80006d6:	f000 ffcd 	bl	8001674 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <main+0x224>)
 80006e2:	f000 ffc7 	bl	8001674 <HAL_GPIO_WritePin>
	  Str ='T';}
 80006e6:	2354      	movs	r3, #84	; 0x54
 80006e8:	71bb      	strb	r3, [r7, #6]
 {if (u8_Speed >=100)u8_Speed =100;if(u8_Speed <=10)u8_Speed =10;
 80006ea:	e72f      	b.n	800054c <main+0x74>
 80006ec:	200000b8 	.word	0x200000b8
 80006f0:	20000100 	.word	0x20000100
 80006f4:	40014400 	.word	0x40014400
 80006f8:	20000070 	.word	0x20000070
 80006fc:	40020000 	.word	0x40020000

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fb8c 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xb8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemClock_Config+0xb8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SystemClock_Config+0xb8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SystemClock_Config+0xbc>)
 800074e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f000 ffaf 	bl	80016d8 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000780:	f000 fa40 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fa12 	bl	8001bc8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 fa2b 	bl	8000c04 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_TIM1_Init+0x98>)
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <MX_TIM1_Init+0x9c>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_TIM1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM1_Init+0x98>)
 80007f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_TIM1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_TIM1_Init+0x98>)
 800080a:	f001 fbbd 	bl	8001f88 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f9f6 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM1_Init+0x98>)
 8000826:	f001 fe25 	bl	8002474 <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000830:	f000 f9e8 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM1_Init+0x98>)
 8000842:	f002 f9ab 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800084c:	f000 f9da 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000028 	.word	0x20000028
 800085c:	40010000 	.word	0x40010000

08000860 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM10_Init+0x90>)
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_TIM10_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_TIM10_Init+0x90>)
 8000880:	220f      	movs	r2, #15
 8000882:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM10_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM10_Init+0x90>)
 800088c:	2263      	movs	r2, #99	; 0x63
 800088e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_TIM10_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM10_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM10_Init+0x90>)
 800089e:	f001 fb73 	bl	8001f88 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f9ac 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM10_Init+0x90>)
 80008ae:	f001 fc15 	bl	80020dc <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f9a4 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM10_Init+0x90>)
 80008d4:	f001 fd0c 	bl	80022f0 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 80008de:	f000 f991 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM10_Init+0x90>)
 80008e4:	f000 fa0a 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000070 	.word	0x20000070
 80008f4:	40014400 	.word	0x40014400

080008f8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_TIM11_Init+0x40>)
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <MX_TIM11_Init+0x44>)
 8000900:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_TIM11_Init+0x40>)
 8000904:	220f      	movs	r2, #15
 8000906:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_TIM11_Init+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_TIM11_Init+0x40>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_TIM11_Init+0x40>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_TIM11_Init+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_TIM11_Init+0x40>)
 8000924:	f001 fb30 	bl	8001f88 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800092e:	f000 f969 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000b8 	.word	0x200000b8
 800093c:	40014800 	.word	0x40014800

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART1_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART1_UART_Init+0x4c>)
 800094c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART1_UART_Init+0x4c>)
 8000978:	f002 f97e 	bl	8002c78 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f93f 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000100 	.word	0x20000100
 8000990:	40011000 	.word	0x40011000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x114>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0x114>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0x114>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_GPIO_Init+0x114>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	21e3      	movs	r1, #227	; 0xe3
 8000a1e:	4823      	ldr	r0, [pc, #140]	; (8000aac <MX_GPIO_Init+0x118>)
 8000a20:	f000 fe28 	bl	8001674 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000a2a:	4820      	ldr	r0, [pc, #128]	; (8000aac <MX_GPIO_Init+0x118>)
 8000a2c:	f000 fe22 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a36:	f000 fe1d 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA5
                           PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5
 8000a3a:	f240 13e7 	movw	r3, #487	; 0x1e7
 8000a3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_GPIO_Init+0x118>)
 8000a54:	f000 fc8a 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_GPIO_Init+0x118>)
 8000a6e:	f000 fc7d 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a8a:	f000 fc6f 	bl	800136c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2009      	movs	r0, #9
 8000a94:	f000 fba1 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a98:	2009      	movs	r0, #9
 8000a9a:	f000 fbba 	bl	8001212 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
uint8_t Get = '\n';
 8000abe:	230a      	movs	r3, #10
 8000ac0:	737b      	strb	r3, [r7, #13]
uint8_t Start = '\r';
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	733b      	strb	r3, [r7, #12]
Counter ++;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ad2:	701a      	strb	r2, [r3, #0]
uint8_t ONE = '1';
 8000ad4:	2331      	movs	r3, #49	; 0x31
 8000ad6:	73fb      	strb	r3, [r7, #15]
uint8_t ZERO = '0';
 8000ad8:	2330      	movs	r3, #48	; 0x30
 8000ada:	73bb      	strb	r3, [r7, #14]

  if(GPIO_Pin == GPIO_PIN_3) {
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d120      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x70>

	  UART_SendNumber(temp -__HAL_TIM_GET_COUNTER(&htim11));
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x84>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f823 	bl	8000b40 <UART_SendNumber>

	  HAL_UART_Transmit(&huart1, &Get, sizeof(Get), 50);
 8000afa:	f107 010d 	add.w	r1, r7, #13
 8000afe:	2332      	movs	r3, #50	; 0x32
 8000b00:	2201      	movs	r2, #1
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x88>)
 8000b04:	f002 f905 	bl	8002d12 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, &Start, sizeof(Get), 50);
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	2332      	movs	r3, #50	; 0x32
 8000b0e:	2201      	movs	r2, #1
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x88>)
 8000b12:	f002 f8fe 	bl	8002d12 <HAL_UART_Transmit>
	  temp =__HAL_TIM_GET_COUNTER(&htim11);
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b20:	801a      	strh	r2, [r3, #0]
  }
   else {
      __NOP();
  }

}
 8000b22:	e000      	b.n	8000b26 <HAL_GPIO_EXTI_Callback+0x72>
      __NOP();
 8000b24:	bf00      	nop
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000144 	.word	0x20000144
 8000b34:	20000146 	.word	0x20000146
 8000b38:	200000b8 	.word	0x200000b8
 8000b3c:	20000100 	.word	0x20000100

08000b40 <UART_SendNumber>:
void UART_SendNumber(uint16_t A_s32Number)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
	uint8_t L_u8Digits[10] = {0, 0,'\0'};
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	809a      	strh	r2, [r3, #4]
	uint8_t L_u8Counter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	77fb      	strb	r3, [r7, #31]
	uint8_t Arr[6];
	uint8_t Get = 'F';
 8000b5c:	2346      	movs	r3, #70	; 0x46
 8000b5e:	777b      	strb	r3, [r7, #29]
	/* TODO: IMplement negative number handling  	*/
	/* TODO: implement Zero in units corner case    */
	/* save reversed in array */
	while(A_s32Number > 0)
 8000b60:	e019      	b.n	8000b96 <UART_SendNumber+0x56>
	{
		L_u8Digits[L_u8Counter] = A_s32Number%10 ;
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <UART_SendNumber+0xbc>)
 8000b66:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6a:	08d9      	lsrs	r1, r3, #3
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	440b      	add	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	7ffb      	ldrb	r3, [r7, #31]
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	3320      	adds	r3, #32
 8000b7e:	443b      	add	r3, r7
 8000b80:	f803 2c10 	strb.w	r2, [r3, #-16]
		L_u8Counter++;
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	3301      	adds	r3, #1
 8000b88:	77fb      	strb	r3, [r7, #31]
		A_s32Number /= 10 ;
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <UART_SendNumber+0xbc>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	80fb      	strh	r3, [r7, #6]
	while(A_s32Number > 0)
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e2      	bne.n	8000b62 <UART_SendNumber+0x22>


	}

	/* print array in reverese  */
	for(int8_t L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	77bb      	strb	r3, [r7, #30]
 8000ba4:	e021      	b.n	8000bea <UART_SendNumber+0xaa>
	{
		Arr[L_u8Counter-L_s8PrintIndex] = '0'+ L_u8Digits[L_s8PrintIndex];
 8000ba6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000baa:	3320      	adds	r3, #32
 8000bac:	443b      	add	r3, r7
 8000bae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000bb2:	7ff9      	ldrb	r1, [r7, #31]
 8000bb4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	3230      	adds	r2, #48	; 0x30
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	3320      	adds	r3, #32
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f803 2c18 	strb.w	r2, [r3, #-24]
		HAL_UART_Transmit(&huart1, &Arr[L_u8Counter-L_s8PrintIndex] , sizeof(Arr[L_u8Counter-L_s8PrintIndex]), 5);
 8000bc6:	7ffa      	ldrb	r2, [r7, #31]
 8000bc8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	f107 0208 	add.w	r2, r7, #8
 8000bd2:	18d1      	adds	r1, r2, r3
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <UART_SendNumber+0xc0>)
 8000bda:	f002 f89a 	bl	8002d12 <HAL_UART_Transmit>
	for(int8_t L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
 8000bde:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3b01      	subs	r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	77bb      	strb	r3, [r7, #30]
 8000bea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dad9      	bge.n	8000ba6 <UART_SendNumber+0x66>

	}
return ;
 8000bf2:	bf00      	nop
}
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	cccccccd 	.word	0xcccccccd
 8000c00:	20000100 	.word	0x20000100

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_TIM_Base_MspInit+0x8c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10e      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c8e:	e026      	b.n	8000cde <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_TIM_Base_MspInit+0x94>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10e      	bne.n	8000cb8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
}
 8000cb6:	e012      	b.n	8000cde <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_TIM_Base_MspInit+0x98>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10d      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_TIM_Base_MspInit+0x90>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40014400 	.word	0x40014400
 8000cf8:	40014800 	.word	0x40014800

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11e      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_TIM_MspPostInit+0x70>)
 8000d58:	f000 fb08 	bl	800136c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40014400 	.word	0x40014400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <HAL_UART_MspInit+0xd0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d152      	bne.n	8000e38 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_UART_MspInit+0xd4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0xd8>)
 8000e04:	f000 fab2 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <HAL_UART_MspInit+0xdc>)
 8000e24:	f000 faa2 	bl	800136c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2025      	movs	r0, #37	; 0x25
 8000e2e:	f000 f9d4 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e32:	2025      	movs	r0, #37	; 0x25
 8000e34:	f000 f9ed 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f8a2 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ea8:	2008      	movs	r0, #8
 8000eaa:	f000 fbfd 	bl	80016a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART1_IRQHandler+0x10>)
 8000eba:	f002 f85f 	bl	8002f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000100 	.word	0x20000100

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f16:	f7ff ffd7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 ff63 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fadb 	bl	80004d8 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f30:	08003e7c 	.word	0x08003e7c
  ldr r2, =_sbss
 8000f34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f38:	2000014c 	.word	0x2000014c

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f92b 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fe4c 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f943 	bl	800122e <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f90b 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000148 	.word	0x20000148

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000148 	.word	0x20000148

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff feda 	bl	800100c <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d008      	beq.n	8001278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e052      	b.n	800131e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0216 	bic.w	r2, r2, #22
 8001286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <HAL_DMA_Abort+0x62>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0208 	bic.w	r2, r2, #8
 80012b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c8:	e013      	b.n	80012f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ca:	f7ff fe9f 	bl	800100c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d90c      	bls.n	80012f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2220      	movs	r2, #32
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e015      	b.n	800131e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e4      	bne.n	80012ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	223f      	movs	r2, #63	; 0x3f
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d004      	beq.n	8001344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00c      	b.n	800135e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2205      	movs	r2, #5
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e159      	b.n	800163c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8148 	bne.w	8001636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d005      	beq.n	80013be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d130      	bne.n	8001420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b03      	cmp	r3, #3
 800142a:	d017      	beq.n	800145c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d123      	bne.n	80014b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a2 	beq.w	8001636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a56      	ldr	r2, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150e:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_GPIO_Init+0x2ec>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a49      	ldr	r2, [pc, #292]	; (800165c <HAL_GPIO_Init+0x2f0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x202>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_GPIO_Init+0x2f4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x1fe>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a47      	ldr	r2, [pc, #284]	; (8001664 <HAL_GPIO_Init+0x2f8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x1fa>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a46      	ldr	r2, [pc, #280]	; (8001668 <HAL_GPIO_Init+0x2fc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x1f6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <HAL_GPIO_Init+0x300>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x1f2>
 800155a:	2304      	movs	r3, #4
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800155e:	2307      	movs	r3, #7
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4935      	ldr	r1, [pc, #212]	; (8001658 <HAL_GPIO_Init+0x2ec>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a2f      	ldr	r2, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x304>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_GPIO_Init+0x304>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a24      	ldr	r2, [pc, #144]	; (8001670 <HAL_GPIO_Init+0x304>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_GPIO_Init+0x304>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001606:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_GPIO_Init+0x304>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f aea2 	bls.w	8001388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f9f4 	bl	8000ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e267      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d075      	beq.n	80017e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b85      	ldr	r3, [pc, #532]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d05b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x108>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d157      	bne.n	80017e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e242      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x74>
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a75      	ldr	r2, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6f      	ldr	r2, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6c      	ldr	r2, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 8001770:	4b69      	ldr	r3, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a68      	ldr	r2, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fc3c 	bl	800100c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fc38 	bl	800100c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e207      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xc0>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc28 	bl	800100c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fc24 	bl	800100c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1f3      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b51      	ldr	r3, [pc, #324]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0xe8>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c7      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4937      	ldr	r1, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x244>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fbdd 	bl	800100c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fbd9 	bl	800100c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a8      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4925      	ldr	r1, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x244>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fbbc 	bl	800100c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fbb8 	bl	800100c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e187      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d036      	beq.n	8001930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x248>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb9c 	bl	800100c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fb98 	bl	800100c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e167      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x200>
 80018f6:	e01b      	b.n	8001930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x248>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fb85 	bl	800100c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	e00e      	b.n	8001924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fb81 	bl	800100c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d907      	bls.n	8001924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e150      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
 8001918:	40023800 	.word	0x40023800
 800191c:	42470000 	.word	0x42470000
 8001920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ea      	bne.n	8001906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8097 	beq.w	8001a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b7d      	ldr	r3, [pc, #500]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a7c      	ldr	r2, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x474>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b74      	ldr	r3, [pc, #464]	; (8001b4c <HAL_RCC_OscConfig+0x474>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a73      	ldr	r2, [pc, #460]	; (8001b4c <HAL_RCC_OscConfig+0x474>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb41 	bl	800100c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fb3d 	bl	800100c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e10c      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x474>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2ea>
 80019b4:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a63      	ldr	r2, [pc, #396]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x30c>
 80019ca:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a5e      	ldr	r2, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
 80019d6:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a5b      	ldr	r2, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019e4:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fb02 	bl	800100c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fafe 	bl	800100c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0cb      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ee      	beq.n	8001a0c <HAL_RCC_OscConfig+0x334>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff faec 	bl	800100c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fae8 	bl	800100c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0b5      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ee      	bne.n	8001a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a1 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d05c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d141      	bne.n	8001b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fabc 	bl	800100c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fab8 	bl	800100c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e087      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fa91 	bl	800100c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fa8d 	bl	800100c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e05c      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x416>
 8001b0c:	e054      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa7a 	bl	800100c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fa76 	bl	800100c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e045      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
 8001b3a:	e03d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e038      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x4ec>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d028      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d121      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d11a      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d111      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0cc      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d90c      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d044      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d119      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e067      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4934      	ldr	r1, [pc, #208]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f9a8 	bl	800100c <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f9a4 	bl	800100c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d20c      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f908 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08003e54 	.word	0x08003e54
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d98:	b090      	sub	sp, #64	; 0x40
 8001d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d00d      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	f200 80a1 	bhi.w	8001f00 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x3a>
 8001dc6:	e09b      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001dcc:	e09b      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd2:	e098      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dde:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d028      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	2200      	movs	r2, #0
 8001df2:	623b      	str	r3, [r7, #32]
 8001df4:	627a      	str	r2, [r7, #36]	; 0x24
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e00:	fb03 f201 	mul.w	r2, r3, r1
 8001e04:	2300      	movs	r3, #0
 8001e06:	fb00 f303 	mul.w	r3, r0, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a43      	ldr	r2, [pc, #268]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e14:	460a      	mov	r2, r1
 8001e16:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e1a:	4413      	add	r3, r2
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	2200      	movs	r2, #0
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	61fa      	str	r2, [r7, #28]
 8001e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e2e:	f7fe f9d1 	bl	80001d4 <__aeabi_uldivmod>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4613      	mov	r3, r2
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e3a:	e053      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	2200      	movs	r2, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	617a      	str	r2, [r7, #20]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e4e:	f04f 0b00 	mov.w	fp, #0
 8001e52:	4652      	mov	r2, sl
 8001e54:	465b      	mov	r3, fp
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e64:	0150      	lsls	r0, r2, #5
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001e6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e86:	ebb2 0408 	subs.w	r4, r2, r8
 8001e8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	00eb      	lsls	r3, r5, #3
 8001e98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9c:	00e2      	lsls	r2, r4, #3
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	eb14 030a 	adds.w	r3, r4, sl
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	eb45 030b 	adc.w	r3, r5, fp
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	60fa      	str	r2, [r7, #12]
 8001ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed8:	f7fe f97c 	bl	80001d4 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3740      	adds	r7, #64	; 0x40
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	017d7840 	.word	0x017d7840

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a9b      	lsrs	r3, r3, #10
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08003e64 	.word	0x08003e64

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f64:	f7ff ffdc 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0b5b      	lsrs	r3, r3, #13
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	08003e64 	.word	0x08003e64

08001f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e041      	b.n	800201e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fe56 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f000 fb1c 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d001      	beq.n	8002040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e03c      	b.n	80020ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_TIM_Base_Start+0xa0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_TIM_Base_Start+0x5c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d013      	beq.n	8002084 <HAL_TIM_Base_Start+0x5c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_TIM_Base_Start+0xa4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_TIM_Base_Start+0x5c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_TIM_Base_Start+0xa8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_TIM_Base_Start+0x5c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_TIM_Base_Start+0xac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_TIM_Base_Start+0x5c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_TIM_Base_Start+0xb0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d010      	beq.n	80020b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a6:	e007      	b.n	80020b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40014000 	.word	0x40014000

080020dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f839 	bl	800217a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fa72 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_TIM_PWM_Start+0x24>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e022      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d109      	bne.n	80021ce <HAL_TIM_PWM_Start+0x3e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e015      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d109      	bne.n	80021e8 <HAL_TIM_PWM_Start+0x58>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e008      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e068      	b.n	80022d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_TIM_PWM_Start+0x82>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	e013      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d104      	bne.n	8002222 <HAL_TIM_PWM_Start+0x92>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002220:	e00b      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d104      	bne.n	8002232 <HAL_TIM_PWM_Start+0xa2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	e003      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc84 	bl	8002b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_TIM_PWM_Start+0x14c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d107      	bne.n	8002262 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_TIM_PWM_Start+0x14c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d018      	beq.n	800229e <HAL_TIM_PWM_Start+0x10e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d013      	beq.n	800229e <HAL_TIM_PWM_Start+0x10e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_TIM_PWM_Start+0x150>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_TIM_PWM_Start+0x10e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_TIM_PWM_Start+0x154>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_TIM_PWM_Start+0x10e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_TIM_PWM_Start+0x158>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_TIM_PWM_Start+0x10e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_TIM_PWM_Start+0x15c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d111      	bne.n	80022c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d010      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	e007      	b.n	80022d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800
 80022e8:	40000c00 	.word	0x40000c00
 80022ec:	40014000 	.word	0x40014000

080022f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800230a:	2302      	movs	r3, #2
 800230c:	e0ae      	b.n	800246c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	f200 809f 	bhi.w	800245c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002359 	.word	0x08002359
 8002328:	0800245d 	.word	0x0800245d
 800232c:	0800245d 	.word	0x0800245d
 8002330:	0800245d 	.word	0x0800245d
 8002334:	08002399 	.word	0x08002399
 8002338:	0800245d 	.word	0x0800245d
 800233c:	0800245d 	.word	0x0800245d
 8002340:	0800245d 	.word	0x0800245d
 8002344:	080023db 	.word	0x080023db
 8002348:	0800245d 	.word	0x0800245d
 800234c:	0800245d 	.word	0x0800245d
 8002350:	0800245d 	.word	0x0800245d
 8002354:	0800241b 	.word	0x0800241b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f9d0 	bl	8002704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0208 	orr.w	r2, r2, #8
 8002372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6999      	ldr	r1, [r3, #24]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	619a      	str	r2, [r3, #24]
      break;
 8002396:	e064      	b.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fa16 	bl	80027d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6999      	ldr	r1, [r3, #24]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	021a      	lsls	r2, r3, #8
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	619a      	str	r2, [r3, #24]
      break;
 80023d8:	e043      	b.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fa61 	bl	80028a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0208 	orr.w	r2, r2, #8
 80023f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0204 	bic.w	r2, r2, #4
 8002404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69d9      	ldr	r1, [r3, #28]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
      break;
 8002418:	e023      	b.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 faab 	bl	800297c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69d9      	ldr	r1, [r3, #28]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	021a      	lsls	r2, r3, #8
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	61da      	str	r2, [r3, #28]
      break;
 800245a:	e002      	b.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	75fb      	strb	r3, [r7, #23]
      break;
 8002460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_TIM_ConfigClockSource+0x1c>
 800248c:	2302      	movs	r3, #2
 800248e:	e0b4      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x186>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c8:	d03e      	beq.n	8002548 <HAL_TIM_ConfigClockSource+0xd4>
 80024ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ce:	f200 8087 	bhi.w	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	f000 8086 	beq.w	80025e6 <HAL_TIM_ConfigClockSource+0x172>
 80024da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024de:	d87f      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b70      	cmp	r3, #112	; 0x70
 80024e2:	d01a      	beq.n	800251a <HAL_TIM_ConfigClockSource+0xa6>
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d87b      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d050      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x11a>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d877      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b50      	cmp	r3, #80	; 0x50
 80024f2:	d03c      	beq.n	800256e <HAL_TIM_ConfigClockSource+0xfa>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d873      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d058      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x13a>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d86f      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d064      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x15a>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d86b      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b20      	cmp	r3, #32
 800250a:	d060      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d867      	bhi.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d05c      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x15a>
 8002514:	2b10      	cmp	r3, #16
 8002516:	d05a      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x15a>
 8002518:	e062      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f000 faf1 	bl	8002b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800253c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	609a      	str	r2, [r3, #8]
      break;
 8002546:	e04f      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f000 fada 	bl	8002b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256a:	609a      	str	r2, [r3, #8]
      break;
 800256c:	e03c      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f000 fa4e 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2150      	movs	r1, #80	; 0x50
 8002586:	4618      	mov	r0, r3
 8002588:	f000 faa7 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 800258c:	e02c      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	f000 fa6d 	bl	8002a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2160      	movs	r1, #96	; 0x60
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fa97 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80025ac:	e01c      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f000 fa2e 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fa87 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f000 fa7e 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80025de:	e003      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e000      	b.n	80025e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <TIM_Base_SetConfig+0xe4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00f      	beq.n	800263c <TIM_Base_SetConfig+0x38>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d00b      	beq.n	800263c <TIM_Base_SetConfig+0x38>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a31      	ldr	r2, [pc, #196]	; (80026ec <TIM_Base_SetConfig+0xe8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d007      	beq.n	800263c <TIM_Base_SetConfig+0x38>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <TIM_Base_SetConfig+0xec>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0x38>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <TIM_Base_SetConfig+0xf0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <TIM_Base_SetConfig+0xe4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01b      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d017      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <TIM_Base_SetConfig+0xe8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <TIM_Base_SetConfig+0xec>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00f      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <TIM_Base_SetConfig+0xf0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00b      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <TIM_Base_SetConfig+0xf4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <TIM_Base_SetConfig+0xf8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d003      	beq.n	800268e <TIM_Base_SetConfig+0x8a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <TIM_Base_SetConfig+0xfc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d108      	bne.n	80026a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <TIM_Base_SetConfig+0xe4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d103      	bne.n	80026d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	615a      	str	r2, [r3, #20]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800
 80026f4:	40000c00 	.word	0x40000c00
 80026f8:	40014000 	.word	0x40014000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800

08002704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0201 	bic.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 0302 	bic.w	r3, r3, #2
 800274c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <TIM_OC1_SetConfig+0xc8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 0308 	bic.w	r3, r3, #8
 8002766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <TIM_OC1_SetConfig+0xc8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d111      	bne.n	80027a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40010000 	.word	0x40010000

080027d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0210 	bic.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0320 	bic.w	r3, r3, #32
 800281a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <TIM_OC2_SetConfig+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10d      	bne.n	800284c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800284a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <TIM_OC2_SetConfig+0xd4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d113      	bne.n	800287c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000

080028a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <TIM_OC3_SetConfig+0xd0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10d      	bne.n	8002922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800290c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <TIM_OC3_SetConfig+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d113      	bne.n	8002952 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40010000 	.word	0x40010000

0800297c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <TIM_OC4_SetConfig+0x9c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d109      	bne.n	80029f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0210 	bic.w	r2, r3, #16
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2201      	movs	r2, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e050      	b.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d013      	beq.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10c      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e03f      	b.n	8002d0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe f866 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fe1d 	bl	80038fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b08a      	sub	sp, #40	; 0x28
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d17c      	bne.n	8002e2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_Transmit+0x2c>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e075      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Transmit+0x3e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e06e      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2221      	movs	r2, #33	; 0x21
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d66:	f7fe f951 	bl	800100c <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d108      	bne.n	8002d94 <HAL_UART_Transmit+0x82>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002da4:	e02a      	b.n	8002dfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb9b 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e036      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e007      	b.n	8002dee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1cf      	bne.n	8002da6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fb6b 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	f040 808c 	bne.w	8002f70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Receive+0x2e>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e084      	b.n	8002f72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Receive+0x40>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e07d      	b.n	8002f72 <HAL_UART_Receive+0x13c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2222      	movs	r2, #34	; 0x22
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e92:	f7fe f8bb 	bl	800100c <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d108      	bne.n	8002ec0 <HAL_UART_Receive+0x8a>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e003      	b.n	8002ec8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ed0:	e043      	b.n	8002f5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2120      	movs	r1, #32
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb05 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e042      	b.n	8002f72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	3302      	adds	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e01f      	b.n	8002f4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d007      	beq.n	8002f26 <HAL_UART_Receive+0xf0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_UART_Receive+0xfe>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e008      	b.n	8002f46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1b6      	bne.n	8002ed2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ba      	sub	sp, #232	; 0xe8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x66>
 8002fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fbd3 	bl	8003786 <UART_Receive_IT>
      return;
 8002fe0:	e256      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80de 	beq.w	80031a8 <HAL_UART_IRQHandler+0x22c>
 8002fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80d1 	beq.w	80031a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xae>
 8003012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
 8003036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_UART_IRQHandler+0xf6>
 800305a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d011      	beq.n	80030a2 <HAL_UART_IRQHandler+0x126>
 800307e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0208 	orr.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 81ed 	beq.w	8003486 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x14e>
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb5e 	bl	8003786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_UART_IRQHandler+0x17a>
 80030ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04f      	beq.n	8003196 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa66 	bl	80035c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d141      	bne.n	800318e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d9      	bne.n	800310a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_UART_IRQHandler+0x3dc>)
 8003164:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f8db 	bl	8001326 <HAL_DMA_Abort_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003180:	4610      	mov	r0, r2
 8003182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00e      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f99a 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e00a      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f996 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	e006      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f992 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031a2:	e170      	b.n	8003486 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	bf00      	nop
    return;
 80031a6:	e16e      	b.n	8003486 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 814a 	bne.w	8003446 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8143 	beq.w	8003446 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 813c 	beq.w	8003446 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	f040 80b4 	bne.w	800335c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8140 	beq.w	800348a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003212:	429a      	cmp	r2, r3
 8003214:	f080 8139 	bcs.w	800348a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322a:	f000 8088 	beq.w	800333e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800325a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1d9      	bne.n	800322e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800328a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e1      	bne.n	800327a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800330c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330e:	f023 0310 	bic.w	r3, r3, #16
 8003312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003320:	65ba      	str	r2, [r7, #88]	; 0x58
 8003322:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e3      	bne.n	80032fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd ff84 	bl	8001246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003346:	b29b      	uxth	r3, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8c0 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003354:	e099      	b.n	800348a <HAL_UART_IRQHandler+0x50e>
 8003356:	bf00      	nop
 8003358:	0800368f 	.word	0x0800368f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003364:	b29b      	uxth	r3, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 808b 	beq.w	800348e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8086 	beq.w	800348e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033a6:	647a      	str	r2, [r7, #68]	; 0x44
 80033a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e3      	bne.n	8003382 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033de:	633a      	str	r2, [r7, #48]	; 0x30
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e3      	bne.n	80033ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0310 	bic.w	r3, r3, #16
 8003416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003424:	61fa      	str	r2, [r7, #28]
 8003426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	69b9      	ldr	r1, [r7, #24]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	617b      	str	r3, [r7, #20]
   return(result);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e3      	bne.n	8003400 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f848 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003444:	e023      	b.n	800348e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_UART_IRQHandler+0x4ea>
 8003452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f929 	bl	80036b6 <UART_Transmit_IT>
    return;
 8003464:	e014      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00e      	beq.n	8003490 <HAL_UART_IRQHandler+0x514>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f969 	bl	8003756 <UART_EndTransmit_IT>
    return;
 8003484:	e004      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
    return;
 8003486:	bf00      	nop
 8003488:	e002      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
      return;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
      return;
 800348e:	bf00      	nop
  }
}
 8003490:	37e8      	adds	r7, #232	; 0xe8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop

08003498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	; 0x40
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e050      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d04c      	beq.n	80035a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 800350c:	f7fd fd7e 	bl	800100c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003518:	429a      	cmp	r2, r3
 800351a:	d241      	bcs.n	80035a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353c:	637a      	str	r2, [r7, #52]	; 0x34
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e5      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	613b      	str	r3, [r7, #16]
   return(result);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3314      	adds	r3, #20
 800356e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003570:	623a      	str	r2, [r7, #32]
 8003572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69f9      	ldr	r1, [r7, #28]
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	61bb      	str	r3, [r7, #24]
   return(result);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e00f      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d09f      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3740      	adds	r7, #64	; 0x40
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b095      	sub	sp, #84	; 0x54
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f0:	643a      	str	r2, [r7, #64]	; 0x40
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	61fb      	str	r3, [r7, #28]
   return(result);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	64bb      	str	r3, [r7, #72]	; 0x48
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800362a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	d119      	bne.n	8003674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0310 	bic.w	r3, r3, #16
 8003656:	647b      	str	r3, [r7, #68]	; 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003660:	61ba      	str	r2, [r7, #24]
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	613b      	str	r3, [r7, #16]
   return(result);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003682:	bf00      	nop
 8003684:	3754      	adds	r7, #84	; 0x54
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ff09 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b21      	cmp	r3, #33	; 0x21
 80036c8:	d13e      	bne.n	8003748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d2:	d114      	bne.n	80036fe <UART_Transmit_IT+0x48>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d110      	bne.n	80036fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]
 80036fc:	e008      	b.n	8003710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	1c59      	adds	r1, r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6211      	str	r1, [r2, #32]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4619      	mov	r1, r3
 800371e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fe8e 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08c      	sub	sp, #48	; 0x30
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b22      	cmp	r3, #34	; 0x22
 8003798:	f040 80ab 	bne.w	80038f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	d117      	bne.n	80037d6 <UART_Receive_IT+0x50>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
 80037d4:	e026      	b.n	8003824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d007      	beq.n	80037fa <UART_Receive_IT+0x74>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <UART_Receive_IT+0x82>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e008      	b.n	800381a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4619      	mov	r1, r3
 8003832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	d15a      	bne.n	80038ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0220 	bic.w	r2, r2, #32
 8003846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	d135      	bne.n	80038e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	613b      	str	r3, [r7, #16]
   return(result);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f023 0310 	bic.w	r3, r3, #16
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	623a      	str	r2, [r7, #32]
 80038a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	69f9      	ldr	r1, [r7, #28]
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d10a      	bne.n	80038d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fdf9 	bl	80034d4 <HAL_UARTEx_RxEventCallback>
 80038e2:	e002      	b.n	80038ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fde1 	bl	80034ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e002      	b.n	80038f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b0c0      	sub	sp, #256	; 0x100
 8003902:	af00      	add	r7, sp, #0
 8003904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	ea40 0301 	orr.w	r3, r0, r1
 8003924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003954:	f021 010c 	bic.w	r1, r1, #12
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003962:	430b      	orrs	r3, r1
 8003964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	6999      	ldr	r1, [r3, #24]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	ea40 0301 	orr.w	r3, r0, r1
 8003982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <UART_SetConfig+0x2cc>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0xa0>
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d104      	bne.n	80039a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe fae0 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 80039a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039a4:	e003      	b.n	80039ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe fac7 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 80039aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	f040 810c 	bne.w	8003bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039d6:	415b      	adcs	r3, r3
 80039d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039de:	4621      	mov	r1, r4
 80039e0:	eb12 0801 	adds.w	r8, r2, r1
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb43 0901 	adc.w	r9, r3, r1
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	eb18 0303 	adds.w	r3, r8, r3
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	eb49 0303 	adc.w	r3, r9, r3
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	18db      	adds	r3, r3, r3
 8003a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a30:	4613      	mov	r3, r2
 8003a32:	eb42 0303 	adc.w	r3, r2, r3
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
 8003a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a40:	f7fc fbc8 	bl	80001d4 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a74:	4641      	mov	r1, r8
 8003a76:	eb12 0a01 	adds.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	4692      	mov	sl, r2
 8003a96:	469b      	mov	fp, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ad6:	f7fc fb7d 	bl	80001d4 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	; 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003af6:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003af8:	fba3 2302 	umull	r2, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b04:	441c      	add	r4, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b20:	415b      	adcs	r3, r3
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b92:	f7fc fb1f 	bl	80001d4 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	; 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3332      	adds	r3, #50	; 0x32
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4422      	add	r2, r4
 8003bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc4:	e105      	b.n	8003dd2 <UART_SetConfig+0x4d6>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	6239      	str	r1, [r7, #32]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	1854      	adds	r4, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb43 0501 	adc.w	r5, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	eb45 0303 	adc.w	r3, r5, r3
 8003c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c42:	4629      	mov	r1, r5
 8003c44:	008b      	lsls	r3, r1, #2
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	008a      	lsls	r2, r1, #2
 8003c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c54:	f7fc fabe 	bl	80001d4 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	011c      	lsls	r4, r3, #4
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	61b9      	str	r1, [r7, #24]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6139      	str	r1, [r7, #16]
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cea:	4641      	mov	r1, r8
 8003cec:	008a      	lsls	r2, r1, #2
 8003cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cf2:	f7fc fa6f 	bl	80001d4 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	3332      	adds	r3, #50	; 0x32
 8003d0e:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1a:	441c      	add	r4, r3
 8003d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d20:	2200      	movs	r2, #0
 8003d22:	673b      	str	r3, [r7, #112]	; 0x70
 8003d24:	677a      	str	r2, [r7, #116]	; 0x74
 8003d26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	1891      	adds	r1, r2, r2
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	415b      	adcs	r3, r3
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	1851      	adds	r1, r2, r1
 8003d3e:	6039      	str	r1, [r7, #0]
 8003d40:	4649      	mov	r1, r9
 8003d42:	414b      	adcs	r3, r1
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d52:	4659      	mov	r1, fp
 8003d54:	00cb      	lsls	r3, r1, #3
 8003d56:	4651      	mov	r1, sl
 8003d58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	00ca      	lsls	r2, r1, #3
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	4642      	mov	r2, r8
 8003d68:	189b      	adds	r3, r3, r2
 8003d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	460a      	mov	r2, r1
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d80:	667a      	str	r2, [r7, #100]	; 0x64
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d8e:	4649      	mov	r1, r9
 8003d90:	008b      	lsls	r3, r1, #2
 8003d92:	4641      	mov	r1, r8
 8003d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d98:	4641      	mov	r1, r8
 8003d9a:	008a      	lsls	r2, r1, #2
 8003d9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003da0:	f7fc fa18 	bl	80001d4 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003daa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2164      	movs	r1, #100	; 0x64
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 020f 	and.w	r2, r3, #15
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4422      	add	r2, r4
 8003dd0:	609a      	str	r2, [r3, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dde:	bf00      	nop
 8003de0:	51eb851f 	.word	0x51eb851f

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	; (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	; (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	; (8003e28 <__libc_init_array+0x44>)
 8003df8:	f000 f820 	bl	8003e3c <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003e74 	.word	0x08003e74
 8003e20:	08003e74 	.word	0x08003e74
 8003e24:	08003e74 	.word	0x08003e74
 8003e28:	08003e78 	.word	0x08003e78

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
